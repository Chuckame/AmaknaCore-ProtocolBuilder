<#@ assembly name="System.dll" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="ProtocolBuilder" #>
<#@ import namespace="ProtocolBuilder.Parsing" #>
<#@ import namespace="ProtocolBuilder.XmlPatterns" #>
<#+
void WriteNecessaryImports(XmlComponent component) {
    foreach (var field in component.Fields) {
        if (field.IsStaticType || field.IsPolymorphicType) {
            WriteLine($"import {GetTypeFullName(field.WriteType)};");
        }
    }
}

void WriteField(XmlField field)
{
	WriteLine($"private {GetRealType(field)} {field.Name};");
}

void WriteSerializeMethodStatements(XmlComponent component)
{
    if (HasHeritage(component)) {
        WriteLine("super.serialize(writer);");
    }
    int? flagsCount = null;
    int? lastFlagOffset = null;
    foreach(var field in component.Fields)
    {
		string fieldName = $"this.{field.Name}";

		if (field.IsArray) {
            WriteLine($"writer.write{field.ArrayLengthWriteType}({fieldName}.length);");
		    WriteLine($"for (var entry : {fieldName}) {{");
			PushIndent("    ");

			fieldName = "entry";
		}

		if (flagsCount.HasValue && lastFlagOffset.HasValue && (lastFlagOffset.Value >= 7 || field.ReadType != "Flag" ))
		{
			WriteLine($"writer.writeByte(flag{flagsCount});");
			lastFlagOffset = null;
		}

		if (field.ReadType == "Flag")
		{
			if (!lastFlagOffset.HasValue || lastFlagOffset.Value >= 7)
			{
				flagsCount = flagsCount.HasValue ? flagsCount + 1 : 1;
			    WriteLine($"byte flag{flagsCount} = 0;");
			}

			int flagOffset = field.FlagIndex;
			lastFlagOffset = flagOffset;
		    WriteLine($"flag{flagsCount} = BooleanByteWrapper.setFlag(flag{flagsCount}, {flagOffset}, {fieldName});");
		} else if (field.IsStaticType) {
			WriteLine($"writer.writeStaticType({fieldName});");
		} else if (field.IsPolymorphicType) {
		    WriteLine($"writer.writePolymorphicType({fieldName});");
		} else {
			WriteLine($"writer.write{field.WriteType}({fieldName});");
		}

		if (field.IsArray) {
			PopIndent();
            WriteLine("}");
		}
    }

    if (lastFlagOffset.HasValue) {
		WriteLine($"writer.writeByte(flag{flagsCount});");
    }
}

void WriteDeserializeMethodStatements(XmlComponent component)
    {
    if (HasHeritage(component)) {
        WriteLine("super.deserialize(reader);");
    }
    int? flagsCount = null;
    int? lastFlagOffset = null;
    foreach(var field in component.Fields)
    {
		string fieldName = "this." + field.Name;

		if (field.IsArray) {
            WriteLine($"{fieldName} = new {GetRealTypeWithoutArray(field)}[reader.read{field.ArrayLengthReadType}()];");
			WriteLine($"for (int i = 0; i < {fieldName}.length; i++) {{");
			PushIndent("    ");

			fieldName += "[i]";
		}

		if (field.ReadType == "Flag")
		{
			if (!lastFlagOffset.HasValue || lastFlagOffset.Value >= 7)
			{
				flagsCount = flagsCount.HasValue ? flagsCount + 1 : 1;
			    WriteLine($"byte flag{flagsCount} = reader.readByte();");
			}

			lastFlagOffset = field.FlagIndex;
		    WriteLine($"{fieldName} = BooleanByteWrapper.getFlag(flag{flagsCount}, {field.FlagIndex});");
		}
		else if (field.IsStaticType)
		{
			WriteLine($"{fieldName} = reader.readStaticType({field.ReadType}.class);");
		}
		else if (field.IsPolymorphicType)
		{
		    WriteLine($"{fieldName} = reader.readPolymorphicType({field.ReadType}.class);");
		}
		else
		{
			WriteLine($"{fieldName} = reader.read{field.ReadType}();");
		}

		if (field.IsArray)
		{
			PopIndent();
            WriteLine("}");
		}
    }
}

string GetRealType(XmlField field, bool fullPathForTypes = false)
{
    string realType = GetRealTypeWithoutArray(field, fullPathForTypes);
    if (field.IsArray)
        realType += "[]";
    return realType;
}

string GetRealTypeWithoutArray(XmlField field, bool fullPathForTypes = false)
{
    string realType = field.ReadType;
    if (field.IsStaticType || field.IsPolymorphicType) {
        if (fullPathForTypes)
            realType = GetTypeFullName(realType);
    } else {
        realType = GetRealType(realType);
    }
    return realType;
} 

string GetRealType(string type)
{
    switch (type)
    {
        case "Flag":          return "boolean";
        case "Boolean":       return "boolean";
        case "Double":        return "double";
        case "Float":         return "float";
        case "Byte":          return "byte";
        case "Bytes":         return "byte[]";
        case "UnsignedByte":  return "short";
        case "Short":         return "short";
        case "UnsignedShort": return "int";
        case "Int":           return "int";
        case "UnsignedInt":   return "long";
        case "VarShort":      return "int";
        case "VarUhShort":    return "int";
        case "VarInt":        return "long";
        case "VarUhInt":      return "long";
        case "VarLong":       return "java.math.BigInteger";
        case "VarUhLong":     return "java.math.BigInteger";
        case "UTF":           return "String";
		case "Rectangle":     return "fr.chuckame.dofus.protocol.shared.Rectangle";
		case "Point":         return "fr.chuckame.dofus.protocol.shared.Point";
		case "TransformData": return "fr.chuckame.dofus.protocol.shared.TransformData";
        default:              return type;
    }
}

string GetTypeFullName(string rawType)
{
	var type = Program.Configuration.XmlTypesProfile.SearchXmlPattern(rawType);
    if (type == null)
        Error($"No xml message found for {rawType}");
	return Program.Configuration.TypesProfile.OutPutNamespace + "." + type.RelativePath + "." + type.Name;
}

string GetMessageFullName(string rawType)
{
	var type = Program.Configuration.XmlMessagesProfile.SearchXmlPattern(rawType);
	if (type == null)
        Error($"No xml type found for {rawType}");
	return Profile.OutPutNamespace + "." + type.RelativePath + "." + type.Name;
}

bool HasHeritage(XmlComponent component) {
    return !string.IsNullOrEmpty(component.Heritage);
}

void WriteLombokAnnotations(XmlComponent component) {
    WriteLombokAnnotations(!string.IsNullOrEmpty(component.Heritage));
}

void WriteLombokAnnotations(bool hasHeritage) {
	WriteLine("@Data");
	WriteLine("@NoArgsConstructor");
    if (hasHeritage) {
		WriteLine("@ToString(callSuper = true)");
		WriteLine("@EqualsAndHashCode(callSuper = true)");
    }
}

void WriteGeneratedAnnotation() {
    WriteLine("@javax.annotation.processing.Generated(\"ProtocolBuilder\")");
}

#>
